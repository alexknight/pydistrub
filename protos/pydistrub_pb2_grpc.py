# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from protos import pydistrub_pb2 as protos_dot_pydistrub__pb2


class InvokeRemoteStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TaskApply = channel.unary_unary(
                '/rpc.InvokeRemote/TaskApply',
                request_serializer=protos_dot_pydistrub__pb2.ApplyRequest.SerializeToString,
                response_deserializer=protos_dot_pydistrub__pb2.ApplyResponse.FromString,
                )
        self.TaskDispatcher = channel.unary_unary(
                '/rpc.InvokeRemote/TaskDispatcher',
                request_serializer=protos_dot_pydistrub__pb2.Request.SerializeToString,
                response_deserializer=protos_dot_pydistrub__pb2.RetObject.FromString,
                )
        self.Close = channel.unary_unary(
                '/rpc.InvokeRemote/Close',
                request_serializer=protos_dot_pydistrub__pb2.Void.SerializeToString,
                response_deserializer=protos_dot_pydistrub__pb2.Void.FromString,
                )


class InvokeRemoteServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TaskApply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TaskDispatcher(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Close(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InvokeRemoteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TaskApply': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskApply,
                    request_deserializer=protos_dot_pydistrub__pb2.ApplyRequest.FromString,
                    response_serializer=protos_dot_pydistrub__pb2.ApplyResponse.SerializeToString,
            ),
            'TaskDispatcher': grpc.unary_unary_rpc_method_handler(
                    servicer.TaskDispatcher,
                    request_deserializer=protos_dot_pydistrub__pb2.Request.FromString,
                    response_serializer=protos_dot_pydistrub__pb2.RetObject.SerializeToString,
            ),
            'Close': grpc.unary_unary_rpc_method_handler(
                    servicer.Close,
                    request_deserializer=protos_dot_pydistrub__pb2.Void.FromString,
                    response_serializer=protos_dot_pydistrub__pb2.Void.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.InvokeRemote', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class InvokeRemote(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TaskApply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.InvokeRemote/TaskApply',
            protos_dot_pydistrub__pb2.ApplyRequest.SerializeToString,
            protos_dot_pydistrub__pb2.ApplyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TaskDispatcher(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.InvokeRemote/TaskDispatcher',
            protos_dot_pydistrub__pb2.Request.SerializeToString,
            protos_dot_pydistrub__pb2.RetObject.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Close(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.InvokeRemote/Close',
            protos_dot_pydistrub__pb2.Void.SerializeToString,
            protos_dot_pydistrub__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
